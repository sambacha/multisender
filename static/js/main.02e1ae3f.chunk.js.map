{"version":3,"sources":["components/Header.js","generateElement.js","components/1.js","components/2.js","components/3.js","components/Transaction.js","components/approve.js","components/4.js","components/5.js","components/Retry.js","components/Welcome.js","components/Navigation.js","App.js","getWeb3.js","stores/web3Store.js","stores/tokenStore.js","stores/gasPriceStore.js","stores/txStore.js","stores/UiStore.js","index.js"],"names":["Header","inject","observer","state","multisenderAddress","a","props","UiStore","tokenStore","proxyMultiSenderAddress","setState","explorerUrl","this","web3Store","className","href","htmlFor","target","React","Component","generateElement","msg","errorNode","document","createElement","innerHTML","required","control","error","isChanged","isUsed","value","toString","trim","length","FirstStep","onNext","wizard","step","id","parseCompleted","onCsvChange","csv","parseAddresses","console","log","jsonAddresses","swal","title","text","icon","invalid_addresses","JSON","stringify","slice","push","message","txStore","setStartedUrl","onTokenAddress","bind","onDecimalsChange","format","placeholder","tokenAddress","label","onParse","addNextHandler","tokenInfoArray","userTokens","filter","t","tokenInfo","reduce","v","addresses","Object","keys","e","address","Web3Utils","isAddress","setTokenAddress","setDecimals","Promise","res","rej","csvtojson","noheader","fromString","on","el","defineProperty","writable","configurable","enumerable","setJsonAddresses","content","errors","Creatable","isLoading","loading","name","onChange","loadingPlaceholder","options","disabled","data-gram","validations","onBlur","createTheme","primary","secondary","fontFamily","background","default","context","divider","button","focus","hover","sortFocus","RecipientsDataTable","columns","selector","sortable","grow","tokenSymbol","left","theme","customStyles","pagination","style","marginBottom","cells","paginationPerPage","data","paginationTotalRows","ThirdStep","BN","totalBalance","gt","defAccTokenBalance","multisendGasEthValue","getMultisendPlusApproveGasEthValue","ethBalanceWei","toWei","ethBalance","displayMultisendGasEthValue","parseFloat","fromWei","toFixed","allowance","gte","onGasPriceChange","selected","gasPriceStore","setSelectedGasPrice","updateCurrentFee","onGasShareChange","setSelectedGasShare","gasPricesArray","gasPrice","transferGas","approveGas","multisendGas","gasSharesArray","dublicates","getTransferGas","totalNumberTx","addPerTx","arrayLimit","getMultisendGas","multisendGasOrig","Math","floor","parseInt","getApproveTxGas","getApproveGas","approveGasOrig","setTimeout","clearTimeout","_updateCurrentFeeImpl","standardInHex","approvePlusMultisendGas","plus","setCurrentFee","savedGas","minus","newCurrentFeeRounded","times","div","selectedGasShare","dp","displayValue","transferEthValue","displayTransferEthValue","savedGasEthValue","displaySavedGasEthValue","selectedGasPrice","padding","renderTokenBalance","renderTransferGasInfo","renderTokenAllowance","renderMultisendGasInfo","renderSavingsGasInfo","addressesData","Transaction","classname","tx","hash","status","ApproveStep","intervalId","txs","doApprove","setInterval","clearInterval","txHashes","map","index","mined","FourthStep","location","reload","totalNumberOftx","calcTotalNumberOftx","doSendExecuted","doSend","Number","txCount","label2","onTxInput","txHash","getTxReceipt","txdata","type","Link","to","Navigation","render","next","previous","steps","onClick","App","nextHandlers","forEach","handler","ex","startedUrl","Redirect","pathname","Route","history","percent","indexOf","color","TransitionGroup","CSSTransition","classNames","timeout","enter","exit","_web3Config","_web3Promise","getWeb3","resolve","reject","window","addEventListener","hasOwnProperty","web3","Web3","givenProvider","eth","net","getId","then","netId","netIdName","trustApiName","ethereum","request","method","accounts","firstAccount","defaultAccount","estimateGas","__proto__","call","web3Instance","injectedWeb3","catch","err","Web3Store","rootStore","userTokensInitialized","url","web3Config","getUserTokens","setExplorerUrl","blockchain_network","toLowerCase","api_suffix","etherscanApiKey","process","fetch","json","result","tokens","tokensUniqueObj","i","token","tokensUnique","unshift","observable","action","require","TokenStore","getWeb3Promise","web3Obj","netIdEnvVarName","toUpperCase","contractAddress","decimals","Contract","ERC20ABI","methods","balanceOf","multiplier","subscribe","getBalance","toFormat","symbol","currentFee","getCurrentFee","getEthBalance","getArrayLimit","getDecimals","getAllowance","getTokenSymbol","balances_to_send","addresses_to_send","filteredAddresses","account","replace","balance","values","indexAddr","addr","obj","pow","ceil","computed","GasPriceStore","gasPricePromise","getGasPrices","response","fast","gasPrices","toHex","TxStore","txHashToIndex","interval","approval","keepRunning","_approve","toJS","_multisend","totalBalanceWithDecimals","approve","send","from","once","receipt","getTxStatus","transactionHash","encodeABI","encodedData","transfer","totalGas","_getTransferGas","token_address","start","end","totalInWei","total","val","balances_to_send_sum","totalInEth","ethValue","MultiSenderAbi","multisender","multiTransfer_OST","gas","multiTransferToken_a4A","substring","getTransaction","txInfo","getTransactionReceipt","gasUsed","Root","HashRouter","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.02e1ae3f.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { inject, observer } from 'mobx-react';\n\n@inject('UiStore')\n@observer\nexport class Header extends React.Component {\n  state = {\n    multisenderAddress: null,\n  };\n\n  componentDidMount() {\n    (async () => {\n      const multisenderAddress = await this.props.UiStore.tokenStore.proxyMultiSenderAddress();\n      this.setState({ multisenderAddress });\n    })();\n  }\n\n  render() {\n    const explorerUrl =\n      this.props.UiStore.web3Store.explorerUrl || 'https://etherscan.io';\n\n    return (\n      <header className=\"header\">\n        <div className=\"multisend-container\">\n          <a href=\"#\" className=\"header-logo\"></a>\n          <form className=\"form form_header\">\n            {/* <Link className=\"button\" to='/retry'>Retry Failed Transaction</Link> */}\n            <label htmlFor=\"network\" className=\"multisend-label\">\n              MultiSender Address:{' '}\n              <a\n                target=\"_blank\"\n                href={`${explorerUrl}/address/${this.state.multisenderAddress}`}\n              >\n                {this.state.multisenderAddress}\n              </a>\n            </label>\n          </form>\n        </div>\n        <div className=\"multisend-container\">\n          Supports Mainnet, Ropsten, Rinkeby, Kovan, Goerli\n        </div>\n      </header>\n    );\n  }\n}\n","export default function generateElement(msg) {\n  let errorNode = document.createElement('div');\n  errorNode.innerHTML = `${msg}`;\n  return errorNode;\n}\n","import React from 'react';\nimport Web3Utils from 'web3-utils';\nimport Form from 'react-validation/build/form';\nimport Textarea from 'react-validation/build/textarea';\nimport Button from 'react-validation/build/button';\nimport { form, control, button } from 'react-validation';\nimport { inject, observer } from 'mobx-react';\nimport swal from 'sweetalert';\nimport generateElement from '../generateElement';\nimport Example from './example.json';\n// import { PulseLoader} from 'react-spinners';\nimport { RadioGroup, Radio } from 'react-radio-group';\nimport csvtojson from 'csvtojson';\nimport Select from 'react-select';\nimport '../assets/stylesheets/react-select.min.css';\n\nconst ownInput = ({ error, isChanged, isUsed, ...props }) => (\n  <div>\n    {isChanged && isUsed && error}\n    <input {...props} />\n  </div>\n);\nconst Input = control(ownInput);\n\nconst required = (value) => {\n  if (!value.toString().trim().length) {\n    return <span className=\"error\">required</span>;\n  }\n};\n\nconst isAddress = (value) => {\n  if (!Web3Utils.isAddress(value)) {\n    return <span className=\"error\">Token address is invalid</span>;\n  }\n};\n// const InvalidJSON = <div>Your JSON is invalid, please visit <a href=\"https://jsonlint.com/\" target=\"_blank\">Online Json Validator</a></div>\n\n// const isJson = (value) => {\n//   try {\n//     JSON.parse(value)\n//   } catch(e) {\n//     return InvalidJSON\n//   }\n// };\n\n@inject('UiStore')\n@observer\nexport class FirstStep extends React.Component {\n  constructor(props) {\n    super(props);\n    this.tokenStore = props.UiStore.tokenStore;\n    this.txStore = props.UiStore.txStore;\n    this.web3Store = props.UiStore.web3Store;\n    this.web3Store.setStartedUrl('#/');\n    this.onTokenAddress = this.onTokenAddress.bind(this);\n    this.onDecimalsChange = this.onDecimalsChange.bind(this);\n    // this.onJsonChange = this.onJsonChange.bind(this);\n    this.state = {\n      format: 'csv',\n      placeholder: `\n0xCBA5018De6b2b6F89d84A1F5A68953f07554765e,12\n0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85c9,1123.45645\n0x00b5F428905DEA1a67940093fFeaCeee58cA91Ae,1.049\n0x00fC79F38bAf0dE21E1fee5AC4648Bc885c1d774,14546\n`,\n      tokenAddress: { label: '', value: null },\n      csv: '',\n    };\n    // this.onSelectFormat = this.onSelectFormat.bind(this)\n    this.onParse = this.onParse.bind(this);\n    this.parseCompleted = false;\n    // this.list = [];\n\n    this.props.addNextHandler(this.onNext);\n  }\n\n  componentDidMount() {\n    // this.tokenStore.reset()\n    // this.txStore.reset()\n\n    if ('' !== this.tokenStore.tokenAddress) {\n      const tokenInfoArray = this.web3Store.userTokens.filter((t) => {\n        return t.value === this.tokenStore.tokenAddress;\n      });\n      if (tokenInfoArray.length > 0) {\n        const tokenInfo = tokenInfoArray[0];\n        this.setState({ tokenAddress: { ...tokenInfo } });\n      }\n    }\n\n    if (this.tokenStore.jsonAddresses.length > 0) {\n      const csv = this.tokenStore.jsonAddresses.reduce((csv, v) => {\n        const addresses = Object.keys(v);\n        const val = addresses[0] + ',' + v[addresses[0]];\n        return csv + val + '\\n';\n      }, '');\n      this.setState({ csv: csv });\n    }\n  }\n  async onTokenAddress(e) {\n    if (!e) {\n      this.setState({ tokenAddress: { label: '', value: '' } });\n      return;\n    }\n    const address = e.value;\n    if (Web3Utils.isAddress(address)) {\n      await this.tokenStore.setTokenAddress(address);\n      this.setState({ tokenAddress: { label: e.label, value: e.value } });\n    }\n  }\n  //   onSelectFormat(newFormat){\n  //     this.parseCompleted = false;\n  //     if(newFormat === 'csv'){\n  //       this.setState({format: newFormat, placeholder: `\n  // 0xCBA5018De6b2b6F89d84A1F5A68953f07554765e,12\n  // 0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85c9,1123.45645\n  // 0x00b5F428905DEA1a67940093fFeaCeee58cA91Ae,1.049\n  // 0x00fC79F38bAf0dE21E1fee5AC4648Bc885c1d774,14546\n  //   `})\n  //     swal(\"Information\", `Please provide CSV file in comma separated address,balance format one line per address.\n  //     \\nExample:\\n\n  // 0xCBA5018De6b2b6F89d84A1F5A68953f07554765e,12\n  // 0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85c9,113.45\n  // 0x00b5F428905DEA1a67940093fFeaCeee58cA91Ae,1.049\n  // 0x00fC79F38bAf0dE21E1fee5AC4648Bc885c1d774,14546\n  //     `, 'info')\n  //     } else {\n  //       this.setState({format: newFormat, placeholder: JSON.stringify(Example)})\n  //       swal({\n  //         content: generateElement(`<div style=\"color:black;\">\n  //         Please provide JSON-array file in the following format.\n  //         \\nExample:\\n\n  //         <div style=\"font-size: 12px;color:purple;\">\n  //         [<br/>\n  //           {\"0xCBA5018De6b2b6F89d84A1F5A68953f07554765e\":\"12\"},\n  //           {\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85c9\":\"1123.45645\"},\n  //           {\"0x00b5F428905DEA1a67940093fFeaCeee58cA91Ae\":\"1.049\"},\n  //           {\"0x00fC79F38bAf0dE21E1fee5AC4648Bc885c1d774\":\"14546\"}\n  //           <br/>]\n  //         </div>\n  //         </div>\n  //         `),\n  //         icon: 'info'\n  //       })\n  //\n  //     }\n  //   }\n  onDecimalsChange(e) {\n    this.tokenStore.setDecimals(e.target.value);\n  }\n\n  // onJsonChange(value) {\n  //   try {\n  //     let addresses = JSON.parse(value);\n  //     this.tokenStore.setJsonAddresses(addresses)\n  //     this.parseCompleted = true;\n  //   } catch(e) {\n  //     const error = e.message.replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t');\n  //     console.error(error)\n  //     swal({\n  //       content: generateElement(`${error} Please visit <a target=\"_blank\" href=\"https://jsonlint.com\">JsonLint.com</a>`),\n  //       icon: \"error\",\n  //     })\n  //   }\n  // }\n\n  async onCsvChange(value) {\n    return new Promise((res, rej) => {\n      let addresses = [];\n      csvtojson({ noheader: true })\n        .fromString(value)\n        .on('csv', (csv) => {\n          let el = {};\n          if (csv.length === 2) {\n            Object.defineProperty(el, csv[0], {\n              value: csv[1],\n              writable: true,\n              configurable: true,\n              enumerable: true,\n            });\n            addresses.push(el);\n          }\n        })\n        .on('end', () => {\n          try {\n            console.log('csv is done');\n            this.parseCompleted = true;\n            this.tokenStore.setJsonAddresses(addresses);\n            res(addresses);\n          } catch (e) {\n            console.error(e);\n            rej(e);\n            swal({\n              content: 'Your CSV is invalid',\n              icon: 'error',\n            });\n          }\n        });\n    });\n  }\n\n  onParse(e) {\n    // this.list = e.target.value;\n    this.setState({ csv: e.target.value });\n    // if(this.state.format === 'json') {\n    //   this.onJsonChange(e.target.value)\n    // }\n    if (this.state.format === 'csv') {\n      this.onCsvChange(e.target.value);\n    }\n    return;\n  }\n\n  onNext = async (wizard) => {\n    // console.log(wizard.step)\n    if ('home' !== wizard.step.id) {\n      return;\n    }\n\n    try {\n      if (!this.parseCompleted) {\n        await this.onCsvChange(this.state.csv);\n      }\n      await this.tokenStore.parseAddresses();\n      console.log('length of addresses', this.tokenStore.jsonAddresses.length);\n      if (this.tokenStore.jsonAddresses.length === 0) {\n        swal({\n          title: 'The address list is empty.',\n          text:\n            'Please make sure you set correct CSV or JSON format in input selector',\n          icon: 'error',\n        });\n        return;\n      }\n      if (this.tokenStore.invalid_addresses.length > 0) {\n        swal({\n          title:\n            'There are invalid eth addresses. If you click Next, multisender will remove them from the list.',\n          text: JSON.stringify(\n            this.tokenStore.invalid_addresses.slice(),\n            null,\n            '\\n'\n          ),\n          icon: 'error',\n        });\n        return;\n      }\n      wizard.push('inspect');\n    } catch (e) {\n      console.error(e);\n      swal({\n        title: 'Parsing Error',\n        text: e.message,\n        icon: 'error',\n      });\n    }\n  };\n\n  render() {\n    if (this.tokenStore.errors.length > 0) {\n      swal('Error!', this.tokenStore.errors.toString(), 'error');\n    }\n    if (this.web3Store.errors.length > 0) {\n      swal('Error!', this.web3Store.errors.toString(), 'error');\n    }\n    return (\n      <div>\n        <div className=\"description\">\n          <ol>\n            <li>Select Token Address</li>\n            <li>Enter comma-separated list of addresses and values to send</li>\n            <li>\n              Press the <strong>Next</strong> button\n            </li>\n          </ol>\n        </div>\n        <Form className=\"form\">\n          <div className=\"form-inline\">\n            <div className=\"form-inline-i form-inline-i_token-address\">\n              <label htmlFor=\"token-address\" className=\"multisend-label\">\n                Token Address\n              </label>\n              <Select.Creatable\n                isLoading={this.web3Store.loading}\n                name=\"token-address\"\n                id=\"token-address\"\n                value={this.state.tokenAddress}\n                onChange={this.onTokenAddress}\n                loadingPlaceholder=\"Loading your token addresses...\"\n                placeholder=\"Please select a token or input the address\"\n                options={this.web3Store.userTokens.slice()}\n              />\n            </div>\n          </div>\n\n          <div className=\"form-inline\">\n            <div className=\"form-inline-i form-inline-i_token-address-values\">\n              <label htmlFor=\"token-address-values\" className=\"multisend-label\">\n                List of addresses and values\n              </label>\n              <Textarea\n                disabled={this.web3Store.loading}\n                name=\"token-address-values\"\n                id=\"token-address-values\"\n                data-gram\n                validations={[required]}\n                placeholder={`Example: ${this.state.placeholder}`}\n                value={this.state.csv}\n                onBlur={this.onParse}\n                id=\"addresses-with-balances\"\n                className=\"multisend-textarea\"\n              ></Textarea>\n            </div>\n          </div>\n        </Form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport class SecondStep extends React.Component {\n  render() {\n    return (\n      <div className=\"multisend-container multisend-container_bg\">\n        <div className=\"content\">\n          <h1 className=\"title\">\n            <strong>Welcome to Token</strong> MultiSender\n          </h1>\n          <p className=\"description\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n            eiusmod tempor incididunt ut labore <a href=\"#\">et dolore magna</a>{' '}\n            aliqua.\n          </p>\n          <form className=\"form\">\n            <div className=\"form-inline\">\n              <div className=\"form-inline-i form-inline-i_token-address\">\n                <label htmlFor=\"token-address\" className=\"multisend-label\">\n                  Token Address\n                </label>\n                <input type=\"text\" className=\"input\" id=\"token-address\" />\n              </div>\n              <div className=\"form-inline-i form-inline-i_token-decimals\">\n                <label htmlFor=\"token-decimals\" className=\"multisend-label\">\n                  Token Decimals\n                </label>\n                <input type=\"text\" className=\"input\" id=\"token-decimals\" />\n              </div>\n            </div>\n            <div className=\"form-inline\">\n              <div className=\"form-inline-i form-inline-i_balance\">\n                <label htmlFor=\"balance\" className=\"multisend-label\">\n                  Balance\n                </label>\n                <input type=\"text\" className=\"input\" id=\"balance\" />\n              </div>\n              <div className=\"form-inline-i form-inline-i_balance\">\n                <label htmlFor=\"address-balance\" className=\"multisend-label\">\n                  Address with Balance\n                </label>\n                <input type=\"text\" className=\"input\" id=\"address-balance\" />\n              </div>\n              <button type=\"button\" className=\"button button_add\"></button>\n            </div>\n            <div className=\"table\">\n              <div className=\"table-tr\">\n                <p className=\"table-td\">0.5 ETH</p>\n                <p className=\"table-td table-td_hash\">\n                  0xf3a71cc1be5ce833c471e3f25aa391f9cd56e1aa\n                </p>\n                <div className=\"table-td\">\n                  <a href=\"#\" className=\"table-remove\"></a>\n                </div>\n              </div>\n              <div className=\"table-tr\">\n                <p className=\"table-td\">2.001 ETH</p>\n                <p className=\"table-td table-td_hash\">\n                  0x67de6a531b58327d075535e89524be5c5672f16b\n                </p>\n                <div className=\"table-td\">\n                  <a href=\"#\" className=\"table-remove\"></a>\n                </div>\n              </div>\n            </div>\n            <Link className=\"button button_next\" to=\"/3\">\n              Check Information\n            </Link>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport BN from 'bignumber.js';\nimport Web3Utils from 'web3-utils';\nimport swal from 'sweetalert';\nimport Select from 'react-select';\nimport Form from 'react-validation/build/form';\n\nimport DataTable, { createTheme } from 'react-data-table-component';\n\ncreateTheme('solarized', {\n  text: {\n    primary: '#fff',\n    secondary: 'rgb(156, 216, 255)',\n    fontFamily: 'monospace',\n  },\n  background: {\n    default: 'rgba(255,255,255,0)',\n  },\n  context: {\n    background: 'rgba(255,255,255,1)',\n    text: '#FFFFFF',\n  },\n  divider: {\n    default: '#073642',\n  },\n  button: {\n    default: 'rgba(156, 216, 255, 1)',\n    focus: 'rgba(156, 216, 255,.8)',\n    hover: 'rgba(156, 216, 255,.8)',\n    disabled: 'rgba(156, 216, 255, .5)',\n  },\n  sortFocus: {\n    default: 'rgba(156, 216, 255, .54)',\n  },\n});\n\nconst RecipientsDataTable = (props) => {\n  const columns = [\n    {\n      name: 'Address',\n      selector: 'address',\n      sortable: true,\n      grow: 3.8,\n    },\n    {\n      name: 'Amount, ' + props.tokenSymbol,\n      selector: 'balance',\n      sortable: true,\n      left: true,\n    },\n  ];\n\n  const customStyles = {\n    pagination: {\n      style: {\n        marginBottom: '20px',\n      },\n    },\n    cells: {\n      style: {\n        fontFamily: 'monospace',\n      },\n    },\n  };\n\n  return (\n    <DataTable\n      title=\"List of recipients\"\n      columns={columns}\n      theme=\"solarized\"\n      customStyles={customStyles}\n      pagination\n      paginationPerPage={10}\n      data={props.data}\n      paginationTotalRows={props.data.length}\n    />\n  );\n};\n\n@inject('UiStore')\n@observer\nexport class ThirdStep extends React.Component {\n  constructor(props) {\n    super(props);\n    this.tokenStore = props.UiStore.tokenStore;\n    this.txStore = props.UiStore.txStore;\n    this.gasPriceStore = props.UiStore.gasPriceStore;\n    console.log(this.gasPriceStore.gasPricesArray);\n    this.state = {\n      gasPrice: '',\n      transferGas: 0,\n      approveGas: 0,\n      multisendGas: 0,\n    };\n    this.gasSharesArray = [\n      { label: '20%', value: '20' },\n      { label: '50%', value: '50' },\n      { label: '70%', value: '70' },\n      { label: '100%', value: '100' },\n    ];\n\n    this.props.addNextHandler(this.onNext);\n  }\n  componentDidMount() {\n    if (this.tokenStore.dublicates.length > 0) {\n      swal({\n        title: `There were duplicated eth addresses in your list.`,\n        text: `${JSON.stringify(\n          this.tokenStore.dublicates.slice(),\n          null,\n          '\\n'\n        )}.\\n Multisender already combined the balances for those addreses. Please make sure it did the calculation correctly.`,\n        icon: 'warning',\n      });\n    }\n    (async () => {\n      try {\n        const transferGas = await this.txStore.getTransferGas({\n          slice: this.tokenStore.totalNumberTx,\n          addPerTx: this.tokenStore.arrayLimit,\n        });\n        this.setState({ transferGas });\n        if (\n          '0x000000000000000000000000000000000000bEEF' ===\n          this.tokenStore.tokenAddress\n        ) {\n          // Ether\n          const multisendGasOrig = await this.txStore.getMultisendGas({\n            slice: this.tokenStore.totalNumberTx,\n            addPerTx: this.tokenStore.arrayLimit,\n          });\n          // Gas Limit: 84,279\n          // Gas Used by Transaction: 82,164 (97.49%)\n          const multisendGas = Math.floor(parseInt(multisendGasOrig) * 0.975);\n          this.setState({ multisendGas });\n          this.updateCurrentFee();\n        } else {\n          if (\n            parseFloat(this.tokenStore.allowance) >=\n            parseFloat(this.tokenStore.totalBalance)\n          ) {\n            const multisendGasOrig = await this.txStore.getMultisendGas({\n              slice: this.tokenStore.totalNumberTx,\n              addPerTx: this.tokenStore.arrayLimit,\n            });\n            // Gas Limit: 116,153\n            // Gas Used by Transaction: 81,933 (70.54%) for ERC20\n            // Gas Limit: 170,018\n            // Gas Used by Transaction: 135,628 (79.77%) for ERC777 // TODO: detect token type\n            const multisendGas = Math.floor(parseInt(multisendGasOrig) * 0.71);\n            const approveGas = await this.txStore.getApproveTxGas();\n            this.setState({ multisendGas, approveGas });\n            this.updateCurrentFee();\n          } else {\n            const approveGasOrig = await this.txStore.getApproveGas();\n            // Gas Limit: 66,181\n            // Gas Used by Transaction: 44,121 (66.67%)\n            const approveGas = Math.floor(parseInt(approveGasOrig) * 0.6667);\n            this.setState({ approveGas });\n          }\n        }\n      } catch (ex) {\n        console.log('3:', ex);\n      }\n    })();\n  }\n\n  updateCurrentFee() {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      this._updateCurrentFeeImpl();\n    }, 0);\n  }\n\n  _updateCurrentFeeImpl() {\n    const { multisendGas, approveGas, transferGas } = this.state;\n    const gasPrice = this.gasPriceStore.standardInHex;\n    const approvePlusMultisendGas = new BN(multisendGas).plus(\n      new BN(approveGas)\n    );\n    if (approvePlusMultisendGas.gt(new BN(transferGas))) {\n      // no savings\n      this.tokenStore.setCurrentFee('0');\n      return;\n    }\n    const savedGas = new BN(transferGas).minus(approvePlusMultisendGas);\n    const savedGasEthValue = new BN(gasPrice).times(savedGas);\n    const savedGasPerTxEthValue = savedGasEthValue.div(\n      this.tokenStore.totalNumberTx\n    );\n    const newCurrentFee = savedGasPerTxEthValue\n      .times(new BN(parseInt(this.gasPriceStore.selectedGasShare)))\n      .div(100);\n    const newCurrentFeeRounded = newCurrentFee.dp(0, 1);\n    this.tokenStore.setCurrentFee(newCurrentFeeRounded.toString(10));\n  }\n\n  onNext = async (wizard) => {\n    // console.log(wizard.step)\n    if ('inspect' !== wizard.step.id) {\n      return;\n    }\n\n    try {\n      if (\n        new BN(this.tokenStore.totalBalance).gt(\n          new BN(this.tokenStore.defAccTokenBalance)\n        )\n      ) {\n        console.error('Your balance is less than total to send');\n        swal({\n          title: 'Insufficient token balance',\n          text: `You don't have enough tokens to send to all addresses.\\nAmount needed: ${this.tokenStore.totalBalance} ${this.tokenStore.tokenSymbol}`,\n          icon: 'error',\n        });\n        return;\n      }\n      const multisendGasEthValue = this.getMultisendPlusApproveGasEthValue();\n      const ethBalanceWei = Web3Utils.toWei(\n        this.tokenStore.ethBalance,\n        'ether'\n      );\n      if (multisendGasEthValue.gt(new BN(ethBalanceWei))) {\n        const displayMultisendGasEthValue = parseFloat(\n          Web3Utils.fromWei(multisendGasEthValue.toString())\n        ).toFixed(5);\n        console.error('please fund you account in ');\n        swal({\n          title: 'Insufficient ETH balance',\n          text: `You don't have enough ETH to send to all addresses. Amount needed: ${displayMultisendGasEthValue} ETH`,\n          icon: 'error',\n        });\n        return;\n      }\n      if (\n        '0x000000000000000000000000000000000000bEEF' ===\n        this.tokenStore.tokenAddress\n      ) {\n        // Ether\n        wizard.push('multisend');\n      } else {\n        if (\n          new BN(this.tokenStore.allowance).gte(\n            new BN(this.tokenStore.totalBalance)\n          )\n        ) {\n          wizard.push('multisend');\n        } else {\n          wizard.push('approve');\n        }\n      }\n    } catch (e) {\n      console.error(e);\n      swal({\n        title: 'Parsing Error',\n        text: e.message,\n        icon: 'error',\n      });\n    }\n  };\n\n  onGasPriceChange = (selected) => {\n    if (selected) {\n      this.gasPriceStore.setSelectedGasPrice(selected.value);\n      this.updateCurrentFee();\n    }\n  };\n\n  onGasShareChange = (selected) => {\n    if (selected) {\n      this.gasPriceStore.setSelectedGasShare(selected.value);\n      this.updateCurrentFee();\n    }\n  };\n\n  renderTokenBalance() {\n    if (\n      '0x000000000000000000000000000000000000bEEF' ===\n      this.tokenStore.tokenAddress\n    ) {\n      return null;\n    }\n    const value = parseFloat(this.tokenStore.defAccTokenBalance);\n    let displayValue = value.toFixed(5);\n    if ('0.00000' === displayValue) {\n      displayValue = value;\n    }\n    return (\n      <div className=\"send-info-i\">\n        <p>Balance, {this.tokenStore.tokenSymbol}</p>\n        <p className=\"send-info-amount\">{displayValue}</p>\n      </div>\n    );\n  }\n\n  renderTokenAllowance() {\n    if (\n      '0x000000000000000000000000000000000000bEEF' ===\n      this.tokenStore.tokenAddress\n    ) {\n      return null;\n    }\n    return (\n      <div className=\"send-info-i\">\n        <p>Allowance, {this.tokenStore.tokenSymbol}</p>\n        <p className=\"send-info-amount\">{this.tokenStore.allowance}</p>\n      </div>\n    );\n  }\n\n  renderTransferGasInfo() {\n    const gasPrice = this.gasPriceStore.standardInHex;\n    const transferEthValue = new BN(gasPrice).times(\n      new BN(this.state.transferGas)\n    );\n    const displayTransferEthValue = parseFloat(\n      Web3Utils.fromWei(transferEthValue.toString())\n    ).toFixed(5);\n    if (\n      '0x000000000000000000000000000000000000bEEF' ===\n      this.tokenStore.tokenAddress\n    ) {\n      // Ether\n      return (\n        <div className=\"send-info-i\">\n          <p>Gas spent without Multisend, ETH</p>\n          <p className=\"send-info-amount\">{displayTransferEthValue}</p>\n        </div>\n      );\n    } else {\n      if (\n        new BN(this.tokenStore.allowance).gte(\n          new BN(this.tokenStore.totalBalance)\n        )\n      ) {\n        return (\n          <div className=\"send-info-i\">\n            <p>Gas spent without Multisend, ETH</p>\n            <p className=\"send-info-amount\">{displayTransferEthValue}</p>\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"send-info-i\">\n            <p>Gas spent without Multisend, ETH</p>\n            <p className=\"send-info-amount\">{displayTransferEthValue}</p>\n          </div>\n        );\n      }\n    }\n  }\n\n  getMultisendPlusApproveGasEthValue() {\n    const gasPrice = this.gasPriceStore.standardInHex;\n    const approvePlusMultisendGas = new BN(this.state.multisendGas).plus(\n      new BN(this.state.approveGas)\n    );\n    const multisendGasEthValue = new BN(gasPrice).times(\n      approvePlusMultisendGas\n    );\n    return multisendGasEthValue;\n  }\n\n  renderMultisendGasInfo() {\n    const gasPrice = this.gasPriceStore.standardInHex;\n    const approvePlusMultisendGas = new BN(this.state.multisendGas).plus(\n      new BN(this.state.approveGas)\n    );\n    const multisendGasEthValue = new BN(gasPrice).times(\n      approvePlusMultisendGas\n    );\n    const displayMultisendGasEthValue = parseFloat(\n      Web3Utils.fromWei(multisendGasEthValue.toString())\n    ).toFixed(5);\n    if (\n      '0x000000000000000000000000000000000000bEEF' ===\n      this.tokenStore.tokenAddress\n    ) {\n      // Ether\n      return (\n        <div className=\"send-info-i\">\n          <p>Gas spent with Multisend, ETH</p>\n          <p className=\"send-info-amount\">{displayMultisendGasEthValue}</p>\n        </div>\n      );\n    } else {\n      if (\n        new BN(this.tokenStore.allowance).gte(\n          new BN(this.tokenStore.totalBalance)\n        )\n      ) {\n        return (\n          <div className=\"send-info-i\">\n            <p>Gas spent with Multisend, ETH</p>\n            <p className=\"send-info-amount\">{displayMultisendGasEthValue}</p>\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"send-info-i\">\n            <p>Gas spent with Multisend, ETH</p>\n            <p className=\"send-info-amount\">N/A</p>\n          </div>\n        );\n      }\n    }\n  }\n\n  renderSavingsGasInfo() {\n    const { multisendGas, approveGas, transferGas } = this.state;\n    const gasPrice = this.gasPriceStore.standardInHex;\n    const transferEthValue = new BN(gasPrice).times(\n      new BN(this.state.transferGas)\n    );\n    const displayTransferEthValue = Web3Utils.fromWei(\n      transferEthValue.toString()\n    );\n    // const approveGasEthValue = new BN(gasPrice).times(new BN(this.state.approveGas))\n    // const displayApproveGasEthValue = Web3Utils.fromWei(approveGasEthValue.toString())\n    const approvePlusMultisendGas = new BN(multisendGas).plus(\n      new BN(approveGas)\n    );\n    const multisendGasEthValue = new BN(gasPrice).times(\n      approvePlusMultisendGas\n    );\n    const displayMultisendGasEthValue = Web3Utils.fromWei(\n      multisendGasEthValue.toString()\n    );\n    const savedGas = new BN(transferGas).minus(approvePlusMultisendGas);\n    const savedGasEthValue = new BN(gasPrice).times(savedGas);\n    const displaySavedGasEthValue = parseFloat(\n      Web3Utils.fromWei(savedGasEthValue.toString())\n    ).toFixed(5);\n    let sign = '';\n    // if (approvePlusMultisendGas.gt(new BN(transferGas))) {\n    //   sign = \"-\"\n    // }\n    if (\n      '0x000000000000000000000000000000000000bEEF' ===\n      this.tokenStore.tokenAddress\n    ) {\n      // Ether\n      return (\n        <div className=\"send-info-i\">\n          <p>Your gas savings, ETH</p>\n          <p className=\"send-info-amount\">\n            {sign}\n            {displaySavedGasEthValue}\n          </p>\n        </div>\n      );\n    } else {\n      if (\n        new BN(this.tokenStore.allowance).gte(\n          new BN(this.tokenStore.totalBalance)\n        )\n      ) {\n        return (\n          <div className=\"send-info-i\">\n            <p>Your gas savings, ETH</p>\n            <p className=\"send-info-amount\">\n              {sign}\n              {displaySavedGasEthValue}\n            </p>\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"send-info-i\">\n            <p>Your gas savings, ETH</p>\n            <p className=\"send-info-amount\">N/A</p>\n          </div>\n        );\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <div className=\"description\">\n            <ol>\n              <li>\n                Choose <strong>Gas Price</strong>\n              </li>\n              <li>\n                Choose <strong>Gas Sharing</strong>\n              </li>\n              <li>Verify addresses and values</li>\n              <li>\n                Press the <strong>Next</strong> button\n              </li>\n            </ol>\n            <p>\n              <strong>Gas Sharing</strong> is a portion of gas saved by this\n              service that you are OK to tip\n            </p>\n          </div>\n          <Form className=\"form\">\n            <div className=\"form-inline\">\n              <div className=\"form-inline-i form-inline-i_gas-price\">\n                <label htmlFor=\"gas-price\" className=\"multisend-label\">\n                  Network Speed (Gas Price)\n                </label>\n                <Select.Creatable\n                  isLoading={this.gasPriceStore.loading}\n                  name=\"gas-price\"\n                  id=\"gas-price\"\n                  value={this.gasPriceStore.selectedGasPrice}\n                  onChange={this.onGasPriceChange}\n                  loadingPlaceholder=\"Fetching gas Price data ...\"\n                  placeholder=\"Please select desired network speed\"\n                  options={this.gasPriceStore.gasPricesArray.slice()}\n                />\n              </div>\n            </div>\n\n            <div className=\"form-inline\">\n              <div className=\"form-inline-i form-inline-i_gas-sharing\">\n                <label htmlFor=\"gas-sharing\" className=\"multisend-label\">\n                  Saved Gas Sharing\n                </label>\n                <Select.Creatable\n                  isLoading={false}\n                  name=\"gas-sharing\"\n                  id=\"gas-sharing\"\n                  value={this.gasPriceStore.selectedGasShare}\n                  onChange={this.onGasShareChange}\n                  loadingPlaceholder=\"\"\n                  placeholder=\"Please select desired gas sharing\"\n                  options={this.gasSharesArray.slice()}\n                />\n              </div>\n            </div>\n          </Form>\n          <div className=\"send-info\" style={{ padding: '15px 0px' }}>\n            <div className=\"send-info-side\">\n              <div className=\"send-info-i\">\n                <p>Total to be Sent, {this.tokenStore.tokenSymbol}</p>\n                <p className=\"send-info-amount\">\n                  {this.tokenStore.totalBalance}\n                </p>\n              </div>\n              {this.renderTokenBalance()}\n              {this.renderTransferGasInfo()}\n              <div className=\"send-info-i\">\n                <p>Total Number of tx Needed</p>\n                <p className=\"send-info-amount\">\n                  {this.tokenStore.totalNumberTx}\n                </p>\n              </div>\n            </div>\n            <div className=\"send-info-side\">\n              {this.renderTokenAllowance()}\n              <div className=\"send-info-i\">\n                <p>Balance, ETH</p>\n                <p className=\"send-info-amount\">{this.tokenStore.ethBalance}</p>\n              </div>\n              {this.renderMultisendGasInfo()}\n              {this.renderSavingsGasInfo()}\n            </div>\n          </div>\n          <RecipientsDataTable\n            data={this.tokenStore.addressesData}\n            tokenSymbol={this.tokenStore.tokenSymbol}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { inject, observer } from 'mobx-react';\n\n@inject('UiStore')\n@observer\nexport class Transaction extends React.Component {\n  render() {\n    const { tx, explorerUrl } = this.props;\n    const { name, hash, status } = tx;\n    let classname;\n    switch (status) {\n      case 'mined':\n        classname = 'table-td_check-hash_done';\n        break;\n      case 'error':\n        classname = 'table-td_check-hash_error';\n        break;\n      case 'pending':\n        classname = 'table-td_check-hash_wait';\n        break;\n      default:\n        classname = 'table-td_check-hash_wait';\n    }\n    // const classname = status === 'mined' ? 'table-td_check-hash_done' : 'table-td_check-hash_wait'\n    return (\n      <div className=\"table-tr\">\n        <div className={`table-td table-td_check-hash ${classname}`}>\n          TxHash:{' '}\n          <a target=\"_blank\" href={`${explorerUrl}/tx/${hash}`}>\n            {hash}\n          </a>{' '}\n          <br /> {name} <br /> Status: {status}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { Transaction } from './Transaction';\n\n@inject('UiStore')\n@observer\nexport class ApproveStep extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.txStore = props.UiStore.txStore;\n    this.explorerUrl = props.UiStore.web3Store.explorerUrl;\n    this.intervalId = null;\n    this.state = {\n      txs: this.txStore.txs,\n    };\n\n    this.props.addNextHandler(this.onNext);\n  }\n  componentDidMount() {\n    (async () => {\n      try {\n        await this.txStore.doApprove();\n        this.setState({ txs: this.txStore.txs });\n      } catch (e) {\n        console.log('doApprove error:', e);\n      }\n    })();\n    if (null === this.intervalId) {\n      this.intervalId = setInterval(() => {\n        this.setState({ txs: this.txStore.txs });\n      }, 1000);\n    }\n  }\n\n  componentWillUnmount() {\n    if (null !== this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n  }\n\n  onNext = async (wizard) => {\n    // console.log(wizard.step)\n    if ('approve' !== wizard.step.id) {\n      return;\n    }\n\n    wizard.push('inspect');\n  };\n\n  render() {\n    const { txs } = this.state;\n    const txHashes = txs.map((tx, index) => {\n      return (\n        <Transaction\n          key={index}\n          tx={{ ...tx }}\n          explorerUrl={this.explorerUrl}\n        />\n      );\n    });\n    const mined = txs.reduce((mined, tx) => {\n      const { status } = tx;\n      return mined && status === 'mined';\n    }, true);\n    let status;\n    if (txs.length > 0) {\n      if (mined) {\n        status =\n          'Approve transaction is mined. Press the Next button to continue';\n      } else {\n        status = 'Approve transaction was sent out. Now wait until it is mined';\n      }\n    } else {\n      status = `Waiting for you to sign an Approve transaction in Metamask`;\n    }\n    return (\n      <div>\n        <div>\n          <div className=\"description\">\n            <div>\n              Sign an Approve transaction in MetaMask\n              <br />\n              to send tokens to many recipients from the Multisend smart\n              contract\n            </div>\n            <p>&nbsp;</p>\n            <ol>\n              <li>Confirm Approve transaction in MetaMask</li>\n              <li>Wait for the transaction to be mined</li>\n              <li>\n                Press the <strong>Next</strong> button\n              </li>\n            </ol>\n          </div>\n          <form className=\"form\">\n            <p>{status}</p>\n            <div className=\"table\">{txHashes}</div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { Transaction } from './Transaction';\n\n@inject('UiStore')\n@observer\nexport class FourthStep extends React.Component {\n  constructor(props) {\n    super(props);\n    this.txStore = props.UiStore.txStore;\n    this.tokenStore = props.UiStore.tokenStore;\n    this.explorerUrl = props.UiStore.web3Store.explorerUrl;\n    this.intervalId = null;\n    this.state = {\n      txs: this.txStore.txs,\n      totalNumberOftx: this.calcTotalNumberOftx(),\n    };\n    this.doSendExecuted = false;\n\n    this.props.addNextHandler(this.onNext);\n  }\n\n  onNext = async (wizard) => {\n    // console.log(wizard.step)\n    if ('multisend' !== wizard.step.id) {\n      return;\n    }\n\n    // reload page to make sure that all caches are cleared\n    location.reload();\n  };\n\n  componentDidMount() {\n    (async () => {\n      try {\n        if (!this.doSendExecuted) {\n          this.doSendExecuted = true;\n          await this.txStore.doSend();\n          this.setState({\n            txs: this.txStore.txs,\n            totalNumberOftx: this.calcTotalNumberOftx(),\n          });\n        }\n      } catch (e) {\n        console.log('doApprove error:', e);\n      }\n    })();\n    if (null === this.intervalId) {\n      this.intervalId = setInterval(() => {\n        this.setState({\n          txs: this.txStore.txs,\n          totalNumberOftx: this.calcTotalNumberOftx(),\n        });\n      }, 1000);\n    }\n  }\n\n  componentWillUnmount() {\n    if (null !== this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n  }\n\n  calcTotalNumberOftx() {\n    let totalNumberOftx;\n\n    // if(Number(this.tokenStore.totalBalance) > Number(this.tokenStore.allowance)){\n    //   totalNumberOftx = Number(this.tokenStore.totalNumberTx) + 1;\n    // } else {\n    totalNumberOftx = Number(this.tokenStore.totalNumberTx);\n    // }\n    return totalNumberOftx;\n  }\n\n  render() {\n    const { txs, totalNumberOftx } = this.state;\n    const txHashes = txs.map((tx, index) => {\n      return (\n        <Transaction\n          key={index}\n          tx={{ ...tx }}\n          explorerUrl={this.explorerUrl}\n        />\n      );\n    });\n    const mined = txs.reduce((mined, tx) => {\n      const { status } = tx;\n      return mined && status === 'mined';\n    }, true);\n    let status;\n    if (txs.length === totalNumberOftx) {\n      if (mined) {\n        status = 'All transactions are mined. Congratulations!';\n      } else {\n        status =\n          'Transactions were sent out. Now wait until all transactions are mined.';\n      }\n    } else {\n      const txCount = totalNumberOftx - txs.length;\n      status = `Waiting for you to sign transaction in Metamask`;\n      if (totalNumberOftx > 1) {\n        status = `Waiting for you to sign ${txCount} transactions in Metamask`;\n      }\n    }\n    let label = 'Sign a multisend transaction in MetaMask';\n    if (totalNumberOftx > 1) {\n      label = `Sign all ${totalNumberOftx} multisend transactions in MetaMask`;\n    }\n    let label2 =\n      'to send tokens to many recipients from the Multisend smart contract';\n    if ('ETH' === this.tokenStore.tokenSymbol) {\n      label2 =\n        'to send ETH to many recipients from the Multisend smart contract';\n    }\n    return (\n      <div>\n        <div>\n          <div className=\"description\">\n            <div>\n              {label}\n              <br />\n              {label2}\n            </div>\n            <p>&nbsp;</p>\n            <ol>\n              <li>Confirm all multisend transactions in MetaMask</li>\n              <li>Wait for all transactions to be mined</li>\n              <li>Check transactions on etherscan</li>\n              <li>\n                Press the <strong>Next</strong> button\n              </li>\n            </ol>\n          </div>\n          <form className=\"form\">\n            <p>{status}</p>\n            <div className=\"table\">{txHashes}</div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport class FifthStep extends React.Component {\n  render() {\n    return (\n      <div className=\"multisend-container multisend-container_bg container_opacity\">\n        <div className=\"content\">\n          <div className=\"transactions-title\">\n            <h1 className=\"title\">\n              <strong>Table Name</strong>\n            </h1>\n            <p className=\"title\">\n              Total: <strong>3789.093 ETH</strong>\n            </p>\n          </div>\n          <div className=\"table\">\n            <div className=\"table-tr table-tr_title\">\n              <div className=\"table-td\">Token Name</div>\n              <div className=\"table-td\">Address</div>\n              <div className=\"table-td\">Amount</div>\n            </div>\n            <div className=\"table-tr\">\n              <div className=\"table-td\">\n                <p>Name 1</p>\n              </div>\n              <div className=\"table-td\">\n                <p className=\"break-all\">\n                  0xc6300135a8fcd43123bb486ff06831b5345d0971\n                </p>\n              </div>\n              <div className=\"table-td\">\n                <p>2.5672 ETH</p>\n              </div>\n            </div>\n            <div className=\"table-tr\">\n              <div className=\"table-td\">\n                <p>Name 2</p>\n              </div>\n              <div className=\"table-td\">\n                <p className=\"break-all\">\n                  0x0a7772cdbeee6dbdfdf944dd3e11d32d6a183bde\n                </p>\n              </div>\n              <div className=\"table-td\">\n                <p>8.009 ETH</p>\n              </div>\n            </div>\n          </div>\n          <Link className=\"button button_next\" to=\"/\">\n            Back to Home\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport swal from 'sweetalert';\nimport { Link } from 'react-router-dom';\nimport generateElement from '../generateElement';\n\n@inject('UiStore')\n@observer\nexport class Retry extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onTxInput = this.onTxInput.bind(this);\n    this.txStore = props.UiStore.txStore;\n\n    this.state = {\n      txHash: '',\n    };\n  }\n\n  onTxInput(e) {\n    const txHash = e.target.value;\n    setTimeout(async () => {\n      if (txHash.length === 66) {\n        // https://kovan.etherscan.io/tx/0x234cb7950c9239ce64033647e14b8fdd915106cad24c8ae57b0eb9052e8ec79a\n        const txdata = await this.txStore.getTxReceipt(txHash);\n        console.log(txdata);\n        this.setState({ txHash });\n      } else {\n        swal({\n          content: generateElement(`Tx Hash is not valid`),\n          icon: 'error',\n        });\n      }\n    }, 750);\n  }\n  render() {\n    return (\n      <div className=\"multisend-container multisend-container_bg container_opacity\">\n        <div className=\"content\">\n          <div className=\"table\">\n            <label htmlFor=\"txhash\" className=\"multisend-label\">\n              Transaction Hash\n            </label>\n            <input\n              onChange={this.onTxInput}\n              type=\"text\"\n              className=\"input\"\n              id=\"txhash\"\n            />\n            <div className=\"table-tr table-tr_title\">\n              <div className=\"table-td\">Token Name</div>\n              <div className=\"table-td\">Address</div>\n              <div className=\"table-td\">Amount</div>\n            </div>\n            <div className=\"table-tr\">\n              <div className=\"table-td\">\n                <p>Name 1</p>\n              </div>\n              <div className=\"table-td\">\n                <p className=\"break-all\">\n                  0xc6300135a8fcd43123bb486ff06831b5345d0971\n                </p>\n              </div>\n              <div className=\"table-td\">\n                <p>2.5672 ETH</p>\n              </div>\n            </div>\n            <div className=\"table-tr\">\n              <div className=\"table-td\">\n                <p>Name 2</p>\n              </div>\n              <div className=\"table-td\">\n                <p className=\"break-all\">\n                  0x0a7772cdbeee6dbdfdf944dd3e11d32d6a183bde\n                </p>\n              </div>\n              <div className=\"table-td\">\n                <p>8.009 ETH</p>\n              </div>\n            </div>\n          </div>\n          <Link className=\"button button_next\" to=\"/\">\n            Back to Home\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport class Welcome extends React.Component {\n  render() {\n    return (\n      <div className=\"multisend-container multisend-container_bg\">\n        <div className=\"content\">\n          <h1 className=\"title\">\n            <strong>Welcome to Token</strong> MultiSender\n          </h1>\n          <p className=\"description\">\n            Desc youtube video how to use multisender\n          </p>\n          <p>Already have JSON or CSV prepared?</p>\n          <Link className=\"button button_next\" to=\"/1\">\n            Proceed for JSON/CSV\n          </Link>\n\n          <p>\n            Transaction Wizard. Build a list of addresses and balances using UI.\n          </p>\n          <Link className=\"button button_next\" to=\"/1\">\n            Proceed for Transaction Wizard\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { WithWizard } from 'react-albus';\n\nconst Navigation = () => (\n  <WithWizard\n    render={({ next, previous, step, steps, push }) => (\n      <div className=\"multisend-buttons\">\n        {'home' !== step.id && 'multisend' !== step.id && (\n          <button\n            className=\"multisend-button multisend-button_prev\"\n            onClick={previous}\n          >\n            Back\n          </button>\n        )}\n\n        {'multisend' === step.id && (\n          <button\n            className=\"multisend-button multisend-button_prev\"\n            onClick={next}\n          >\n            Home\n          </button>\n        )}\n\n        {'multisend' !== step.id && (\n          <button\n            className=\"multisend-button multisend-button_next\"\n            onClick={next}\n          >\n            Next\n          </button>\n        )}\n      </div>\n    )}\n  />\n);\n\nexport default Navigation;\n","import React, { Component } from 'react';\nimport {\n  Header,\n  FirstStep,\n  SecondStep,\n  ThirdStep,\n  ApproveStep,\n  FourthStep,\n  FifthStep,\n  Retry,\n  Welcome,\n} from './components';\nimport { Route, Redirect } from 'react-router-dom';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { inject } from 'mobx-react';\nimport './assets/stylesheets/application.css';\nimport Navigation from './components/Navigation';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport { Line } from 'rc-progress';\nimport { PulseLoader } from 'react-spinners';\n\n// const RoutedWizard = ({ children }) =>\n//   <Route\n//     render={({ history, match: { url } }) =>\n//       <Wizard history={history} basename={url}>\n//         {children}\n//       </Wizard>}\n//   />;\n\n// const PrivateRoute = ({ component: Component, startedUrl, ...rest }) => (\n//   <Route\n//     {...rest}\n//     render={props =>\n//       startedUrl === '#/' || startedUrl === '#/1' ? (\n//         <Component {...props} />\n//       ) : (\n//         <Redirect\n//           to={{\n//             pathname: \"/\"\n//           }}\n//         />\n//       )\n//     }\n//   />\n// );\n\n@inject('UiStore')\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.tokenStore = props.UiStore.tokenStore;\n    this.web3Store = props.UiStore.web3Store;\n    this.nextHandlers = [];\n    this.state = {\n      loading: this.web3Store.loading,\n    };\n  }\n\n  componentDidMount() {\n    (async () => {\n      try {\n        await this.tokenStore.proxyMultiSenderAddress();\n        this.setState((state, props) => {\n          return { loading: this.web3Store.loading };\n        });\n      } catch (ex) {\n        console.log('App:', ex);\n      }\n    })();\n  }\n\n  onNext = (wizard) => {\n    (async () => {\n      try {\n        this.nextHandlers.forEach(async (handler) => {\n          await handler(wizard);\n        });\n      } catch (ex) {\n        console.log('onNext:', ex);\n      }\n    })();\n  };\n\n  addNextHandler = (handler) => {\n    this.nextHandlers.push(handler);\n  };\n\n  render() {\n    const { startedUrl } = this.web3Store;\n    if (!(startedUrl === '#/' || startedUrl === '#/home')) {\n      this.web3Store.setStartedUrl('#/');\n      return (\n        <Redirect\n          to={{\n            pathname: '/',\n          }}\n        />\n      );\n    }\n\n    return (\n      <div>\n        <Header />\n        <Route\n          render={({ history }) => (\n            <Wizard\n              history={history}\n              onNext={this.onNext}\n              render={({ step, steps }) => (\n                <div className=\"multisend-container multisend-container_bg\">\n                  <div className=\"content\">\n                    <h1 className=\"title\">\n                      <strong>Welcome to Token</strong> MultiSender\n                    </h1>\n                    <Line\n                      percent={((steps.indexOf(step) + 1) / steps.length) * 100}\n                      className=\"pad-b\"\n                    />\n                    <div className=\"sweet-loading\">\n                      <PulseLoader\n                        color={'#123abc'}\n                        loading={this.state.loading}\n                      />\n                    </div>\n                    <TransitionGroup>\n                      <CSSTransition\n                        key={step.id}\n                        classNames=\"multisend\"\n                        timeout={{ enter: 500, exit: 500 }}\n                      >\n                        <Steps key={step.id} step={step}>\n                          <Step id=\"home\">\n                            <FirstStep addNextHandler={this.addNextHandler} />\n                          </Step>\n                          <Step id=\"inspect\">\n                            <ThirdStep addNextHandler={this.addNextHandler} />\n                          </Step>\n                          <Step id=\"approve\">\n                            <ApproveStep addNextHandler={this.addNextHandler} />\n                          </Step>\n                          <Step id=\"multisend\">\n                            <FourthStep addNextHandler={this.addNextHandler} />\n                          </Step>\n                        </Steps>\n                      </CSSTransition>\n                    </TransitionGroup>\n                    <Navigation />\n                  </div>\n                </div>\n              )}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\n","import Web3 from 'web3';\n\nconst getAccounts = () => {\n  return new Promise(function (resolve, reject) {\n    (async () => {\n      try {\n        // Will open the MetaMask UI\n        // You should disable this button while the request is pending!\n        const { ethereum } = window;\n        const accounts = await ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n        resolve(accounts);\n      } catch (error) {\n        console.error(error);\n        reject(error);\n      }\n    })();\n  });\n};\n\nlet _web3Config = null;\nlet _web3Promise = null;\nlet getWeb3 = () => {\n  if (!_web3Promise) {\n    _web3Promise = new Promise(function (resolve, reject) {\n      if (null !== _web3Config) {\n        resolve(_web3Config);\n        return;\n      }\n      // Wait for loading completion to avoid race conditions with ethereum injection timing.\n      window.addEventListener('load', function () {\n        // Checking if ethereum has been injected by the browser (Mist/MetaMask)\n        if (window.hasOwnProperty('ethereum')) {\n          // Use Mist/MetaMask's provider.\n          let web3 = new Web3(Web3.givenProvider);\n          web3.eth.net\n            .getId()\n            .then((netId) => {\n              let netIdName, trustApiName, explorerUrl;\n              console.log('netId', netId);\n              netId = '' + netId;\n              switch (netId) {\n                case '1':\n                  netIdName = 'Mainnet';\n                  trustApiName = 'api';\n                  explorerUrl = 'https://etherscan.io';\n                  console.log('This is Foundation', netId);\n                  break;\n                case '3':\n                  netIdName = 'Ropsten';\n                  trustApiName = 'ropsten';\n                  explorerUrl = 'https://ropsten.etherscan.io';\n                  console.log('This is Ropsten', netId);\n                  break;\n                case '4':\n                  netIdName = 'Rinkeby';\n                  trustApiName = 'rinkeby';\n                  explorerUrl = 'https://rinkeby.etherscan.io';\n                  console.log('This is Rinkeby', netId);\n                  break;\n                case '42':\n                  netIdName = 'Kovan';\n                  trustApiName = 'kovan';\n                  explorerUrl = 'https://kovan.etherscan.io';\n                  console.log('This is Kovan', netId);\n                  break;\n                case '99':\n                  netIdName = 'POA Core';\n                  trustApiName = 'poa';\n                  explorerUrl = 'https://poaexplorer.com';\n                  console.log('This is Core', netId);\n                  break;\n                case '77':\n                  netIdName = 'POA Sokol';\n                  trustApiName = 'https://trust-sokol.herokuapp.com';\n                  explorerUrl = 'https://sokol.poaexplorer.com';\n                  console.log('This is Sokol', netId);\n                  break;\n                default:\n                  netIdName = 'Unknown';\n                  console.log('This is an unknown network.', netId);\n              }\n              document.title = `${netIdName} - MultiSender dApp`;\n              getAccounts()\n                .then((accounts) => {\n                  const firstAccount = accounts.length > 0 ? accounts[0] : null;\n                  var defaultAccount =\n                    web3.eth.defaultAccount || firstAccount || null;\n                  if (defaultAccount === null) {\n                    reject({\n                      message:\n                        'Please unlock your metamask and refresh the page',\n                    });\n                    return;\n                  }\n                  if (\n                    web3.eth.estimateGas.__proto__ &&\n                    web3.eth.estimateGas.__proto__.call\n                  ) {\n                    console.log(\n                      'typeof web3.eth.estimateGas.__proto__.call:',\n                      typeof web3.eth.estimateGas.__proto__.call\n                    );\n                    web3.eth.estimateGas.call =\n                      web3.eth.estimateGas.__proto__.call;\n                    console.log(\n                      'typeof web3.eth.estimateGas.call:',\n                      typeof web3.eth.estimateGas.call\n                    );\n                  }\n                  const results = {\n                    web3Instance: web3,\n                    netIdName,\n                    netId,\n                    injectedWeb3: true,\n                    defaultAccount,\n                    trustApiName,\n                    explorerUrl,\n                  };\n                  _web3Config = results;\n                  resolve(_web3Config);\n                })\n                .catch((err) => {\n                  reject(err);\n                });\n            })\n            .catch((err) => {\n              reject(err);\n            });\n\n          console.log('Injected web3 detected.');\n        } else {\n          // Fallback to localhost if no web3 injection.\n          const errorMsg = `Metamask is not installed. Please go to\n          https://metamask.io and return to this page after you installed it`;\n          console.log('No web3 instance injected, using Local web3.');\n          console.error('Metamask not found');\n          reject({ message: errorMsg });\n          return;\n        }\n      });\n    });\n  }\n  return _web3Promise;\n};\n\nexport default getWeb3;\n","import { action, observable } from 'mobx';\nimport getWeb3 from '../getWeb3';\nimport Web3 from 'web3';\n\nclass Web3Store {\n  @observable web3 = {};\n  @observable defaultAccount = '';\n  @observable loading = true;\n  @observable errors = [];\n  @observable userTokens = [];\n  @observable explorerUrl = '';\n  @observable startedUrl = window.location.hash;\n  constructor(rootStore) {\n    this.userTokensInitialized = false;\n  }\n  @action\n  setExplorerUrl(url) {\n    this.explorerUrl = url;\n  }\n  @action\n  setStartedUrl(url) {\n    this.startedUrl = url;\n  }\n\n  async getWeb3Promise() {\n    return getWeb3()\n      .then(async (web3Config) => {\n        if ('' !== this.explorerUrl) {\n          return this;\n        }\n        const { web3Instance, defaultAccount, netId, netIdName } = web3Config;\n        this.defaultAccount = defaultAccount;\n        // this.web3 = new Web3(web3Instance.currentProvider);\n        this.web3 = web3Instance;\n        this.netId = netId;\n        this.netIdName = netIdName;\n        await this.getUserTokens(web3Config);\n        this.setExplorerUrl(web3Config.explorerUrl);\n        console.log('web3 loaded');\n        return this;\n      })\n      .catch((e) => {\n        console.error(e, 'web3 not loaded');\n        this.errors.push(e.message);\n        throw e;\n      });\n  }\n\n  async getUserTokens({ trustApiName, defaultAccount }) {\n    return new Promise((resolve, reject) => {\n      if (this.userTokensInitialized) {\n        resolve(this);\n        return;\n      }\n      const blockchain_network = this.netIdName.toLowerCase();\n      let api_suffix = '';\n      if ('mainnet' !== blockchain_network) {\n        api_suffix = '-' + blockchain_network;\n      }\n      const etherscanApiKey =\n        process.env['REACT_APP_PROXY_MULTISENDER_ETHERSCAN_API_KEY'];\n      window\n        .fetch(\n          `https://api${api_suffix}.etherscan.io/api?module=account&action=tokentx&address=${defaultAccount}&startblock=0&endblock=999999999&sort=desc&apikey=${etherscanApiKey}`\n        )\n        .then((res) => {\n          return res.json();\n        })\n        .then((res) => {\n          if (\n            !(\n              res.result &&\n              typeof res.result === 'object' &&\n              res.result.hasOwnProperty('length')\n            )\n          ) {\n            this.loading = false;\n            reject(\n              'Failed to load user tokens. Try again a minute later please.'\n            );\n            return;\n          }\n          let tokens = res.result\n            .filter((tx) => {\n              if (\n                !tx.hasOwnProperty('to') ||\n                tx['to'].toLowerCase() != defaultAccount.toLowerCase()\n              ) {\n                return false;\n              }\n              if (!tx.hasOwnProperty('contractAddress')) {\n                return false;\n              }\n              if (!tx.hasOwnProperty('tokenName')) {\n                return false;\n              }\n              if (!tx.hasOwnProperty('tokenSymbol')) {\n                return false;\n              }\n              if (!tx.hasOwnProperty('tokenDecimal')) {\n                return false;\n              }\n              return true;\n            })\n            .map((tx) => {\n              const tokenAddress = tx['contractAddress'];\n              const tokenName = tx['tokenName'];\n              const tokenSymbol = tx['tokenSymbol'];\n              const tokenDecimal = tx['tokenDecimal'];\n              return {\n                label: `${tokenSymbol} - ${tokenAddress}`,\n                value: tokenAddress,\n                tokenSymbol,\n              };\n            });\n          let tokensUniqueObj = {};\n          for (let i = 0; i < tokens.length; i++) {\n            let token = tokens[i];\n            tokensUniqueObj[token.value] = token;\n          }\n          let tokensUnique = Object.keys(tokensUniqueObj).map(\n            (tokenAddress) => tokensUniqueObj[tokenAddress]\n          );\n          tokensUnique.unshift({\n            value: '0x000000000000000000000000000000000000bEEF',\n            label: 'ETH - Ethereum Native Currency',\n          });\n          this.userTokens = tokensUnique;\n          this.userTokensInitialized = true;\n          this.loading = false;\n          resolve(this);\n        })\n        .catch((e) => {\n          this.loading = false;\n          console.error(e);\n          reject(e);\n        });\n    });\n  }\n}\n\nexport default Web3Store;\n","import { action, observable, computed } from 'mobx';\nimport ERC20ABI from '../abis/ERC20ABI.json';\n// import StormMultiSenderABI from '../abis/StormMultisender.json'\nimport Web3Utils from 'web3-utils';\n\nconst BN = require('bignumber.js');\nfunction add(a, b) {\n  return new BN(a).plus(new BN(b));\n}\nclass TokenStore {\n  @observable decimals = '';\n  @observable jsonAddresses = [];\n  @observable tokenAddress = '';\n  @observable defAccTokenBalance = '';\n  @observable allowance = '';\n  @observable currentFee = '0';\n  @observable tokenSymbol = '';\n  @observable ethBalance = '';\n  @observable balances_to_send = [];\n  @observable addresses_to_send = [];\n  @observable invalid_addresses = [];\n  @observable filteredAddresses = [];\n  @observable totalBalance = '0';\n  @observable arrayLimit = 0;\n  @observable errors = [];\n  @observable dublicates = [];\n\n  constructor(rootStore) {\n    this.web3Store = rootStore.web3Store;\n    this.gasPriceStore = rootStore.gasPriceStore;\n  }\n\n  async proxyMultiSenderAddress() {\n    try {\n      const web3Obj = await this.web3Store.getWeb3Promise();\n      const netIdEnvVarName =\n        'REACT_APP_PROXY_MULTISENDER_' + web3Obj.netIdName.toUpperCase();\n      const contractAddress = process.env[netIdEnvVarName];\n      return contractAddress;\n    } catch (ex) {\n      console.log(ex);\n    }\n    return '';\n  }\n\n  @action\n  async getDecimals(address) {\n    if ('' !== this.decimals) {\n      return this.decimals;\n    }\n    try {\n      const web3 = this.web3Store.web3;\n      const token = new web3.eth.Contract(ERC20ABI, address);\n      this.decimals = await token.methods.decimals().call();\n      return this.decimals;\n    } catch (e) {\n      this.errors.push(\n        'Cannot get decimals for token contract.\\n Please make sure you are on the right network and token address exists'\n      );\n      console.error('Get Decimals', e);\n    }\n  }\n\n  async getBalance() {\n    if ('' !== this.defAccTokenBalance) {\n      return this.defAccTokenBalance;\n    }\n    try {\n      const web3 = this.web3Store.web3;\n      const token = new web3.eth.Contract(ERC20ABI, this.tokenAddress);\n      const defAccTokenBalance = await token.methods\n        .balanceOf(this.web3Store.defaultAccount)\n        .call();\n      this.defAccTokenBalance = new BN(defAccTokenBalance)\n        .div(this.multiplier)\n        .toString(10);\n      web3.eth.subscribe('newBlockHeaders', async (err, result) => {\n        if (err) {\n          console.log(err);\n          return;\n        }\n        const defAccTokenBalance = await token.methods\n          .balanceOf(this.web3Store.defaultAccount)\n          .call();\n        this.defAccTokenBalance = new BN(defAccTokenBalance)\n          .div(this.multiplier)\n          .toString(10);\n      });\n      return this.defAccTokenBalance;\n    } catch (e) {\n      this.errors.push(\n        `${this.web3Store.defaultAccount} doesn't have token balance.\\n Please make sure you are on the right network and token address exists`\n      );\n      console.error('getBalance', e);\n    }\n  }\n  async getEthBalance() {\n    if ('' !== this.ethBalance) {\n      return this.ethBalance;\n    }\n    try {\n      const web3 = this.web3Store.web3;\n      let ethBalance = await web3.eth.getBalance(this.web3Store.defaultAccount);\n      ethBalance = Web3Utils.fromWei(ethBalance);\n      this.ethBalance = new BN(ethBalance).toFormat(3);\n      web3.eth.subscribe('newBlockHeaders', async (err, result) => {\n        if (err) {\n          console.log(err);\n          return;\n        }\n        let ethBalance = await web3.eth.getBalance(\n          this.web3Store.defaultAccount\n        );\n        ethBalance = Web3Utils.fromWei(ethBalance);\n        this.ethBalance = new BN(ethBalance).toFormat(3);\n      });\n      return this.ethBalance;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  async getTokenSymbol(tokenAddress) {\n    if ('' !== this.tokenSymbol) {\n      return this.tokenSymbol;\n    }\n    try {\n      const web3 = this.web3Store.web3;\n      const token = new web3.eth.Contract(ERC20ABI, tokenAddress);\n      this.tokenSymbol = await token.methods.symbol().call();\n      return this.tokenSymbol;\n    } catch (e) {\n      this.errors.push(\n        'Token with this Address doesnt exist.\\n Please make sure you are on the right network and token address exists'\n      );\n      console.error(e);\n    }\n  }\n  @action\n  async getAllowance() {\n    if ('' !== this.allowance) {\n      return this.allowance;\n    }\n    try {\n      const web3 = this.web3Store.web3;\n      const token = new web3.eth.Contract(ERC20ABI, this.tokenAddress);\n      const allowance = await token.methods\n        .allowance(\n          this.web3Store.defaultAccount,\n          await this.proxyMultiSenderAddress()\n        )\n        .call();\n      this.allowance = new BN(allowance).div(this.multiplier).toString(10);\n      web3.eth.subscribe('newBlockHeaders', async (err, result) => {\n        if (err) {\n          console.log(err);\n          return;\n        }\n        const allowance = await token.methods\n          .allowance(\n            this.web3Store.defaultAccount,\n            await this.proxyMultiSenderAddress()\n          )\n          .call();\n        this.allowance = new BN(allowance).div(this.multiplier).toString(10);\n      });\n      return this.allowance;\n    } catch (e) {\n      this.errors\n        .push(`Token address doesn't have allowance method.\\n Please make sure you are on the right network and token address exists.\\n\n         Your account: ${this.web3Store.defaultAccount}`);\n      console.error('GetAllowance', e);\n    }\n  }\n\n  @action\n  async getCurrentFee() {\n    // const currentFee = \"100000000000000\"; // 0.0001 ETH\n    // this.currentFee = Web3Utils.fromWei(currentFee)\n    return this.currentFee;\n    // try {\n    //   this.web3Store.getWeb3Promise().then(async () => {\n    //     const web3 = this.web3Store.web3;\n    //     const multisender = new web3.eth.Contract(StormMultiSenderABI, await this.proxyMultiSenderAddress());\n    //     const currentFee = await multisender.methods.currentFee(this.web3Store.defaultAccount).call();\n    //     this.currentFee = Web3Utils.fromWei(currentFee)\n    //     return this.currentFee\n    //   })\n    // }\n    // catch(e){\n    //   console.error('getCurrentFee',e)\n    // }\n  }\n\n  setCurrentFee(currentFee) {\n    this.currentFee = Web3Utils.fromWei(currentFee);\n  }\n\n  async getArrayLimit() {\n    this.arrayLimit = 200;\n    // this.arrayLimit = 1;\n    return this.arrayLimit;\n    // try {\n    //   await this.web3Store.getWeb3Promise().then(async () => {\n    //     const web3 = this.web3Store.web3;\n    //     const multisender = new web3.eth.Contract(StormMultiSenderABI, await this.proxyMultiSenderAddress());\n    //     await multisender.methods.arrayLimit().call();\n    //     return this.arrayLimit\n    //   })\n    // }\n    // catch(e){\n    //   console.error('GetArrayLimit', e)\n    // }\n  }\n\n  @action\n  async setTokenAddress(tokenAddress) {\n    await this.web3Store.getWeb3Promise();\n    await this.getCurrentFee();\n    await this.getEthBalance();\n    await this.getArrayLimit();\n    this.decimals = '';\n    this.defAccTokenBalance = '';\n    this.allowance = '';\n    this.tokenSymbol = '';\n    if (\n      Web3Utils.isAddress(this.web3Store.defaultAccount) &&\n      tokenAddress !== '0x000000000000000000000000000000000000bEEF'\n    ) {\n      this.tokenAddress = tokenAddress;\n      await this.getDecimals(tokenAddress);\n      await this.getBalance();\n      await this.getAllowance();\n      await this.getTokenSymbol(tokenAddress);\n    } else {\n      this.tokenAddress = tokenAddress;\n      this.tokenSymbol = 'ETH';\n      this.decimals = 18;\n      this.defAccTokenBalance = this.ethBalance;\n    }\n  }\n\n  @action\n  setDecimals(decimals) {\n    this.decimals = decimals;\n  }\n\n  @action\n  setJsonAddresses(addresses) {\n    this.jsonAddresses = addresses;\n  }\n\n  @action\n  async reset() {\n    this.decimals = '';\n    this.jsonAddresses = [];\n    this.tokenAddress = '';\n    this.defAccTokenBalance = '';\n    this.allowance = '';\n    this.currentFee = '0';\n    this.tokenSymbol = '';\n    this.ethBalance = '';\n    this.balances_to_send = [];\n    this.addresses_to_send = [];\n    this.invalid_addresses = [];\n    this.filteredAddresses = [];\n    this.totalBalance = '0';\n    this.arrayLimit = 0;\n    this.errors = [];\n    this.dublicates = [];\n  }\n\n  @action\n  async parseAddresses() {\n    this.addresses_to_send = [];\n    this.dublicates = [];\n    this.totalBalance = 0;\n    this.invalid_addresses = [];\n    this.balances_to_send = [];\n    return new Promise((res, rej) => {\n      try {\n        this.jsonAddresses.forEach((account, index) => {\n          if (Object.keys(account).length === 0) {\n            rej({\n              message: `There was an error parsing ${JSON.stringify(\n                account\n              )} at line ${index}`,\n            });\n          }\n          const address = Object.keys(account)[0].replace(/\\s/g, '');\n          if (!Web3Utils.isAddress(address)) {\n            this.invalid_addresses.push(address);\n          } else {\n            let balance = Object.values(account)[0];\n            this.totalBalance = new BN(balance)\n              .plus(this.totalBalance)\n              .toString(10);\n            // console.log('balance,', balance)\n            balance = this.multiplier.times(balance);\n            const indexAddr = this.addresses_to_send.indexOf(address);\n            if (indexAddr === -1) {\n              this.addresses_to_send.push(address);\n              this.balances_to_send.push(balance.toString(10));\n            } else {\n              if (this.dublicates.indexOf(address) === -1) {\n                this.dublicates.push(address);\n              }\n              this.balances_to_send[indexAddr] = new BN(\n                this.balances_to_send[indexAddr]\n              )\n                .plus(balance)\n                .toString(10);\n            }\n          }\n        });\n\n        this.jsonAddresses = this.addresses_to_send.map((addr, index) => {\n          let obj = {};\n          obj[addr] = new BN(this.balances_to_send[index])\n            .div(this.multiplier)\n            .toString(10);\n          return obj;\n        });\n        res(this.jsonAddresses);\n        if (\n          this.tokenAddress === '0x000000000000000000000000000000000000bEEF'\n        ) {\n          this.allowance = this.totalBalance;\n        }\n      } catch (e) {\n        rej(e);\n      }\n    });\n  }\n\n  @computed get totalBalanceWithDecimals() {\n    return new BN(this.totalBalance).times(this.multiplier).toString(10);\n  }\n  @computed get multiplier() {\n    const decimals = Number(this.decimals);\n    return new BN(10).pow(decimals);\n  }\n\n  @computed get totalNumberTx() {\n    return Math.ceil(this.jsonAddresses.length / this.arrayLimit);\n  }\n\n  @computed get addressesData() {\n    return this.jsonAddresses.map((account) => {\n      const address = Object.keys(account)[0].replace(/\\s/g, '');\n      const balance = Object.values(account)[0];\n      return { address, balance };\n    });\n  }\n\n  // @computed get totalCostInEth(){\n  //   const standardGasPrice = Web3Utils.toWei(this.gasPriceStore.selectedGasPrice.toString(), 'gwei');\n  //   const currentFeeInWei = Web3Utils.toWei(this.currentFee);\n  //   const tx = new BN(standardGasPrice).times(new BN('5000000'))\n  //   const txFeeMiners = tx.times(new BN(this.totalNumberTx))\n  //   const contractFee = new BN(currentFeeInWei).times(this.totalNumberTx);\n  //\n  //   return Web3Utils.fromWei(txFeeMiners.plus(contractFee).toString(10))\n  // }\n}\n\nexport default TokenStore;\n","import { action, observable, computed } from 'mobx';\nimport Web3Utils from 'web3-utils';\n\nclass GasPriceStore {\n  @observable gasPrices = {};\n  @observable loading = true;\n  @observable gasPricesArray = [\n    { label: 'fast', value: '21' },\n    { label: 'standard', value: '21' },\n    { label: 'slow', value: '21' },\n    { label: 'instant', value: '21' },\n  ];\n  @observable selectedGasPrice = '22';\n  @observable selectedGasShare = '50';\n  gasPricePromise = null;\n  constructor(rootStore) {\n    this.getGasPrices();\n  }\n\n  async getGasPrices() {\n    this.gasPricePromise = fetch('https://gasprice.poa.network/')\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        this.gasPricesArray.map((v) => {\n          v.value = data[v.label];\n          v.label = `${v.label}: ${data[v.label]} gwei`;\n          return v;\n        });\n        this.selectedGasPrice = data.fast;\n        this.gasPrices = data;\n        this.loading = false;\n      })\n      .catch((e) => {\n        this.loading = true;\n        console.error(e);\n      });\n  }\n\n  @computed get standardInHex() {\n    const toWei = Web3Utils.toWei(this.selectedGasPrice.toString(), 'gwei');\n    return Web3Utils.toHex(toWei);\n  }\n  @action\n  setSelectedGasPrice(value) {\n    this.selectedGasPrice = value;\n  }\n\n  @action\n  setSelectedGasShare(value) {\n    this.selectedGasShare = value;\n  }\n}\n\nexport default GasPriceStore;\n","import { action, observable, computed, autorun, toJS } from 'mobx';\nimport Web3Utils from 'web3-utils';\nimport ERC20ABI from '../abis/ERC20ABI.json';\nimport MultiSenderAbi from '../abis/StormMultisender.json';\nimport Web3 from 'web3';\nimport { observer } from 'mobx-react';\nimport swal from 'sweetalert';\nconst BN = require('bignumber.js');\n\nclass TxStore {\n  @observable txs = [];\n  txHashToIndex = {};\n  @observable approval = '';\n  constructor(rootStore) {\n    this.tokenStore = rootStore.tokenStore;\n    this.web3Store = rootStore.web3Store;\n    this.gasPriceStore = rootStore.gasPriceStore;\n    this.interval = null;\n  }\n\n  @action\n  async reset() {\n    this.txs = [];\n    this.txHashToIndex = {};\n    this.approval = '';\n    this.keepRunning = false;\n    clearInterval(this.interval);\n  }\n\n  @action\n  async doSend() {\n    this.keepRunning = true;\n    this.txs = [];\n    this.approval = '';\n    if (\n      new BN(\n        this.tokenStore.totalBalance === '' ? '0' : this.tokenStore.totalBalance\n      ).gt(\n        new BN(\n          this.tokenStore.allowance === '' ? '0' : this.tokenStore.allowance\n        )\n      )\n    ) {\n      this._approve();\n      const interval = setInterval(() => {\n        if (this.approval) {\n          const index = this.txHashToIndex[this.approval];\n          console.log(\n            'checking autorun',\n            index,\n            this.approval,\n            this.txHashToIndex,\n            toJS(this.txs)\n          );\n          if (this.txs[index] && this.txs[index].status === 'mined') {\n            clearInterval(interval);\n            console.log(\n              'lets GO!',\n              this.tokenStore.totalNumberTx,\n              this.tokenStore.arrayLimit\n            );\n            setTimeout(() => {\n              this._multisend({\n                slice: this.tokenStore.totalNumberTx,\n                addPerTx: this.tokenStore.arrayLimit,\n              });\n            }, 1000);\n          }\n        } else {\n          console.log('checking autorun', this.txHashToIndex, toJS(this.txs));\n        }\n      }, 3000);\n      this.interval = interval;\n    } else {\n      this._multisend({\n        slice: this.tokenStore.totalNumberTx,\n        addPerTx: this.tokenStore.arrayLimit,\n      });\n    }\n  }\n\n  @action\n  async doApprove() {\n    this.keepRunning = true;\n    this.txs = [];\n    this.approval = '';\n    if (\n      new BN(\n        this.tokenStore.totalBalance === '' ? '0' : this.tokenStore.totalBalance\n      ).gt(\n        new BN(\n          this.tokenStore.allowance === '' ? '0' : this.tokenStore.allowance\n        )\n      )\n    ) {\n      this._approve();\n      const interval = setInterval(() => {\n        if (this.approval) {\n          const index = this.txHashToIndex[this.approval];\n          console.log(\n            'checking autorun',\n            index,\n            this.approval,\n            this.txHashToIndex,\n            toJS(this.txs)\n          );\n          if (this.txs[index] && this.txs[index].status === 'mined') {\n            clearInterval(interval);\n            console.log('Approve complete');\n          }\n        } else {\n          console.log('checking autorun', this.txHashToIndex, toJS(this.txs));\n        }\n      }, 3000);\n      this.interval = interval;\n    }\n  }\n\n  async _approve() {\n    const index = this.txs.length;\n    const web3 = this.web3Store.web3;\n    const token = new web3.eth.Contract(ERC20ABI, this.tokenStore.tokenAddress);\n    try {\n      return token.methods\n        .approve(\n          await this.tokenStore.proxyMultiSenderAddress(),\n          this.tokenStore.totalBalanceWithDecimals\n        )\n        .send({\n          from: this.web3Store.defaultAccount,\n          gasPrice: this.gasPriceStore.standardInHex,\n        })\n        .once('transactionHash', (hash) => {\n          this.approval = hash;\n          this.txHashToIndex[hash] = index;\n          this.txs[index] = {\n            status: 'pending',\n            name: `MultiSender Approval to spend ${this.tokenStore.totalBalance} ${this.tokenStore.tokenSymbol}`,\n            hash,\n          };\n        })\n        .once('receipt', async (receipt) => {\n          await this.getTxStatus(receipt.transactionHash);\n        })\n        .on('error', (error) => {\n          swal('Error!', error.message, 'error');\n          console.error(error);\n        });\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async getApproveGas() {\n    const web3 = this.web3Store.web3;\n    const token = new web3.eth.Contract(ERC20ABI, this.tokenStore.tokenAddress);\n    let encodedData = await token.methods\n      .approve(\n        await this.tokenStore.proxyMultiSenderAddress(),\n        this.tokenStore.totalBalanceWithDecimals\n      )\n      .encodeABI({ from: this.web3Store.defaultAccount });\n    return web3.eth.estimateGas({\n      from: this.web3Store.defaultAccount,\n      data: encodedData,\n      to: this.tokenStore.tokenAddress,\n    });\n  }\n\n  async _getTransferGas(to, value) {\n    const web3 = this.web3Store.web3;\n    const { tokenAddress } = this.tokenStore;\n    if (tokenAddress === '0x000000000000000000000000000000000000bEEF') {\n      return web3.eth.estimateGas({\n        from: this.web3Store.defaultAccount,\n        // data: null,\n        value: value,\n        to: to,\n      });\n    } else {\n      const token = new web3.eth.Contract(\n        ERC20ABI,\n        this.tokenStore.tokenAddress\n      );\n      const encodedData = await token.methods\n        .transfer(to, value)\n        .encodeABI({ from: this.web3Store.defaultAccount });\n      return await web3.eth.estimateGas({\n        from: this.web3Store.defaultAccount,\n        data: encodedData,\n        to: this.tokenStore.tokenAddress,\n      });\n    }\n  }\n\n  async getTransferGas() {\n    let totalGas = 0;\n    let { addresses_to_send, balances_to_send } = this.tokenStore;\n    for (let i = 0; i < addresses_to_send.length; i++) {\n      const to = addresses_to_send[i];\n      const value = balances_to_send[i];\n      totalGas += await this._getTransferGas(to, value);\n    }\n    return totalGas;\n  }\n\n  async getMultisendGas({ slice, addPerTx }) {\n    let totalGas = 0;\n\n    const token_address = this.tokenStore.tokenAddress;\n    let {\n      addresses_to_send,\n      balances_to_send,\n      currentFee,\n      totalBalance,\n    } = this.tokenStore;\n\n    const start = (slice - 1) * addPerTx;\n    const end = slice * addPerTx;\n    addresses_to_send = addresses_to_send.slice(start, end);\n    balances_to_send = balances_to_send.slice(start, end);\n    const totalInWei = balances_to_send.reduce((total, val) => {\n      return total.plus(new BN(val));\n    }, new BN('0'));\n    const balances_to_send_sum = totalInWei.toString(10);\n    let ethValue;\n    if (token_address === '0x000000000000000000000000000000000000bEEF') {\n      const totalInEth = Web3Utils.fromWei(totalInWei.toString());\n      ethValue = new BN(currentFee).plus(totalInEth);\n    } else {\n      ethValue = new BN(currentFee);\n    }\n    console.log(\n      'slice',\n      slice,\n      addresses_to_send[0],\n      balances_to_send[0],\n      addPerTx\n    );\n    const web3 = this.web3Store.web3;\n    const multisender = new web3.eth.Contract(\n      MultiSenderAbi,\n      await this.tokenStore.proxyMultiSenderAddress()\n    );\n\n    if (token_address === '0x000000000000000000000000000000000000bEEF') {\n      const encodedData = await multisender.methods\n        .multiTransfer_OST(addresses_to_send, balances_to_send)\n        .encodeABI({ from: this.web3Store.defaultAccount });\n      // console.log(\"web3.eth.estimateGas:\", web3.eth.estimateGas)\n      // console.log(\"web3.eth:\", web3.eth)\n      const gas = await web3.eth.estimateGas({\n        from: this.web3Store.defaultAccount,\n        data: encodedData,\n        value: Web3Utils.toHex(Web3Utils.toWei(ethValue.toString())),\n        to: await this.tokenStore.proxyMultiSenderAddress(),\n      });\n      totalGas += gas;\n    } else {\n      const encodedData = await multisender.methods\n        .multiTransferToken_a4A(\n          token_address,\n          addresses_to_send,\n          balances_to_send,\n          balances_to_send_sum\n        )\n        .encodeABI({ from: this.web3Store.defaultAccount });\n      const gas = await web3.eth.estimateGas({\n        from: this.web3Store.defaultAccount,\n        data: encodedData,\n        value: Web3Utils.toHex(Web3Utils.toWei(ethValue.toString())),\n        to: await this.tokenStore.proxyMultiSenderAddress(),\n      });\n      totalGas += gas;\n    }\n    slice--;\n    if (slice > 0) {\n      totalGas += await this.getMultisendGas({ slice, addPerTx });\n    }\n    return totalGas;\n  }\n\n  async _multisend({ slice, addPerTx }) {\n    if (!this.keepRunning) {\n      return;\n    }\n    const token_address = this.tokenStore.tokenAddress;\n    let {\n      addresses_to_send,\n      balances_to_send,\n      currentFee,\n      totalBalance,\n    } = this.tokenStore;\n\n    const start = (slice - 1) * addPerTx;\n    const end = slice * addPerTx;\n    addresses_to_send = addresses_to_send.slice(start, end);\n    balances_to_send = balances_to_send.slice(start, end);\n    const totalInWei = balances_to_send.reduce((total, val) => {\n      return total.plus(new BN(val));\n    }, new BN('0'));\n    const balances_to_send_sum = totalInWei.toString(10);\n    let ethValue;\n    if (token_address === '0x000000000000000000000000000000000000bEEF') {\n      const totalInEth = Web3Utils.fromWei(totalInWei.toString());\n      ethValue = new BN(currentFee).plus(totalInEth);\n    } else {\n      ethValue = new BN(currentFee);\n    }\n    console.log(\n      'slice',\n      slice,\n      addresses_to_send[0],\n      balances_to_send[0],\n      addPerTx\n    );\n    const web3 = this.web3Store.web3;\n    const multisender = new web3.eth.Contract(\n      MultiSenderAbi,\n      await this.tokenStore.proxyMultiSenderAddress()\n    );\n\n    try {\n      if (token_address === '0x000000000000000000000000000000000000bEEF') {\n        let encodedData = await multisender.methods\n          .multiTransfer_OST(addresses_to_send, balances_to_send)\n          .encodeABI({ from: this.web3Store.defaultAccount });\n        let gas = await web3.eth.estimateGas({\n          from: this.web3Store.defaultAccount,\n          data: encodedData,\n          value: Web3Utils.toHex(Web3Utils.toWei(ethValue.toString())),\n          to: await this.tokenStore.proxyMultiSenderAddress(),\n        });\n        console.log('gas', gas);\n        let tx = multisender.methods\n          .multiTransfer_OST(addresses_to_send, balances_to_send)\n          .send({\n            from: this.web3Store.defaultAccount,\n            gasPrice: this.gasPriceStore.standardInHex,\n            gas: Web3Utils.toHex(gas),\n            value: Web3Utils.toHex(Web3Utils.toWei(ethValue.toString())),\n          })\n\n          .once('transactionHash', (hash) => {\n            this.txHashToIndex[hash] = this.txs.length;\n            this.txs.push({\n              status: 'pending',\n              name: `Sending Batch #${this.txs.length} ${\n                this.tokenStore.tokenSymbol\n              }\\n\n            From ${addresses_to_send[0].substring(\n              0,\n              7\n            )} to: ${addresses_to_send[addresses_to_send.length - 1].substring(\n                0,\n                7\n              )}\n          `,\n              hash,\n            });\n          })\n          .once('receipt', async (receipt) => {\n            await this.getTxStatus(receipt.transactionHash);\n          })\n          .on('error', (error) => {\n            swal('Error!', error.message, 'error');\n            console.log(error);\n            // re-send\n            this._multisend({ slice, addPerTx });\n          });\n      } else {\n        let encodedData = await multisender.methods\n          .multiTransferToken_a4A(\n            token_address,\n            addresses_to_send,\n            balances_to_send,\n            balances_to_send_sum\n          )\n          .encodeABI({ from: this.web3Store.defaultAccount });\n        let gas = await web3.eth.estimateGas({\n          from: this.web3Store.defaultAccount,\n          data: encodedData,\n          value: Web3Utils.toHex(Web3Utils.toWei(ethValue.toString())),\n          to: await this.tokenStore.proxyMultiSenderAddress(),\n        });\n        console.log('gas', gas);\n        let tx = multisender.methods\n          .multiTransferToken_a4A(\n            token_address,\n            addresses_to_send,\n            balances_to_send,\n            balances_to_send_sum\n          )\n          .send({\n            from: this.web3Store.defaultAccount,\n            gasPrice: this.gasPriceStore.standardInHex,\n            gas: Web3Utils.toHex(gas),\n            value: Web3Utils.toHex(Web3Utils.toWei(ethValue.toString())),\n          })\n\n          .once('transactionHash', (hash) => {\n            this.txHashToIndex[hash] = this.txs.length;\n            this.txs.push({\n              status: 'pending',\n              name: `Sending Batch #${this.txs.length} ${\n                this.tokenStore.tokenSymbol\n              }\\n\n            From ${addresses_to_send[0].substring(\n              0,\n              7\n            )} to: ${addresses_to_send[addresses_to_send.length - 1].substring(\n                0,\n                7\n              )}\n          `,\n              hash,\n            });\n          })\n          .once('receipt', async (receipt) => {\n            await this.getTxStatus(receipt.transactionHash);\n          })\n          .on('error', (error) => {\n            swal('Error!', error.message, 'error');\n            console.log(error);\n            // re-send\n            this._multisend({ slice, addPerTx });\n          });\n      }\n      slice--;\n      if (slice > 0) {\n        this._multisend({ slice, addPerTx });\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async getTxReceipt(hash) {\n    console.log('getTxReceipt');\n    try {\n      const web3 = this.web3Store.web3;\n      const res = await web3.eth.getTransaction(hash);\n      return res;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async getTxStatus(hash) {\n    console.log('GET TX STATUS', hash);\n    if (!this.keepRunning) {\n      return;\n    }\n    const index = this.txHashToIndex[hash];\n    const web3 = this.web3Store.web3;\n\n    const txInfo = await web3.eth.getTransaction(hash);\n    const receipt = await web3.eth.getTransactionReceipt(hash);\n    if (receipt.hasOwnProperty('status')) {\n      if (receipt.status === '0x1') {\n        this.txs[index].status = `mined`;\n      } else if (receipt.status === '0x0') {\n        // if (receipt.gasUsed > txInfo.gas) {\n        this.txs[index].status = `error`;\n        this.txs[index].name = `Mined but with errors. Perhaps out of gas`;\n        // } else {\n        //   this.txs[index].status = `error`\n        //   this.txs[index].name = `Mined but with errors. Perhaps out of gas`\n        //   // bad tx status, not confirmed!\n        // }\n      } else {\n        // unknown status. pre-Byzantium\n        if (receipt.gasUsed >= txInfo.gas) {\n          this.txs[index].status = `error`;\n          this.txs[index].name = `Mined but with errors. Perhaps out of gas`;\n        } else {\n          this.txs[index].status = `mined`;\n        }\n      }\n    } else {\n      // unknown status. pre-Byzantium\n      if (receipt.gasUsed >= txInfo.gas) {\n        this.txs[index].status = `error`;\n        this.txs[index].name = `Mined but with errors. Perhaps out of gas`;\n      } else {\n        this.txs[index].status = `mined`;\n      }\n    }\n  }\n\n  // gas used by the already processed Approve tx\n  async getApproveTxGas() {\n    if ('' === this.approval) {\n      return 0;\n    }\n    const web3 = this.web3Store.web3;\n    const receipt = await web3.eth.getTransactionReceipt(this.approval);\n    return receipt.gasUsed;\n  }\n}\n\nexport default TxStore;\n","import Web3Store from './web3Store';\nimport TokenStore from './tokenStore';\nimport GasPriceStore from './gasPriceStore';\nimport TxStore from './txStore';\n\nclass UiStore {\n  constructor() {\n    this.gasPriceStore = new GasPriceStore();\n    this.web3Store = new Web3Store(this);\n    this.tokenStore = new TokenStore(this);\n    this.txStore = new TxStore(this);\n  }\n}\n\nexport default new UiStore();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'mobx-react';\nimport UiStore from './stores/UiStore';\n\nconst Root = (\n  <Provider UiStore={UiStore}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>\n);\nReactDOM.render(Root, document.getElementById('wp-multisender-container'));\n"],"sourceRoot":""}